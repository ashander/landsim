% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/migrate.R
\name{migrate_raster}
\alias{migrate_raster}
\title{Migrate the Quantities in a Raster.}
\usage{
migrate_raster(x, migration = list(sigma = 1, normalize = 1, n.weights = 1),
  kern = migration$kern, sigma = migration$sigma,
  radius = migration$radius, normalize = migration$normalize,
  n.weights = migration$n.weights)
}
\arguments{
\item{x}{The Raster* to apply the migration operation to.}

\item{migration}{The \code{migration} object containing the relevant parameters, which may alternatively be passed in individually.}

\item{kern}{Weighting kernel applied to distances.}

\item{sigma}{Distance scaling for kernel.}

\item{radius}{Maximum distance away to truncate the kernel.}

\item{normalize}{Normalize the kernel so that the total sum of weights is equal to this; pass NULL to do no normalization.}

\item{n.weights}{The resulting operator is x -> (1-sum(n.weights)) * x + n.weights[1] * M x + n.weights[2] * M^2 x + ...}
}
\value{
A Raster* of the same form as the input.
If the factor \code{normalize} is NULL then the result is approximately stochastic,
but may be pretty far off if the discretization is very coarse.
It is exactly stochastic if \code{normalize} is 1;
the interpretation of \code{normalize} more generally is the total production
per unit of \code{x}.

However, note that even if \code{normalize} is 1, the migration will still not be conservative
at any raster cells nearby to boundary or NA cells.

The weights in \code{n.weights} should sum to less than 1.

It is not necessarily possible to do exactly the same thing with \code{migrate()} and with \code{migrate_raster()}.
One difference is that this function takes local averages, which does not preserve mass,
whereas \code{migrate()}, with \code{normalize=1}, does preserve mass.
}
\description{
This applies a \code{migration} operation to a given Raster* object.
}
