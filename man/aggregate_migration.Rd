% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/migration_matrix.R
\name{aggregate_migration}
\alias{aggregate_migration}
\title{Aggregate a Migration Matrix to Match a Coarser Raster}
\usage{
aggregate_migration(M, old, new,
  from.old = which(!is.na(raster::values(old))), to.old = from.old,
  from.new = which(!is.na(raster::values(new))), to.new = from.new)
}
\arguments{
\item{M}{The migration matrix.}

\item{old}{The original Raster* the migration matrix was computed for.}

\item{new}{The Raster* for the new migration matrix.}

\item{from.old}{The indices of the "from" cells corresponding to rows in the original migration matrix.}

\item{to.old}{The indices of the "to" cells corresponding to columns in the original migration matrix.}

\item{from.new}{The indices of the "from" cells corresponding to rows in the resulting migration matrix.}

\item{to.new}{The indices of the "to" cells corresponding to columns in the resulting migration matrix.}
}
\value{
A migration matrix.  See \code{migrate}.
The resulting matrix has [i,j]th entry equal to the average over all rows in the old matrix that correspond to `i`
of the sum of columns in that row corresponding to j.  In other words, if the old matrix M is indexed by [u,v],
then the new matrix's [i,j]th entry is:
    (1/n(j)) sum_{v: j(v)=j} sum_{u : i(u)=i}  M[u,v] 
where n(j) = #{ v : j(v)=j }.
}
\description{
This converts a migration matrix computed for one raster
into a migration matrix for another raster that is coarser than the first.
This function does no re-normalization.
}

